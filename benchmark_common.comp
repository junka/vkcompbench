#version 450 core
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float64: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#extension GL_EXT_shader_explicit_arithmetic_types_int16: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_control_flow_attributes : enable

layout(binding=0) buffer InputA { VEC_TYPE x[]; } inputA;
layout(binding=1) buffer InputB { VEC_TYPE x[]; } inputB;
layout(binding=2) buffer Output { VEC_TYPE x[]; } outputO;
layout(constant_id = 0) const uint kLoopSize = 10;
layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

void main()
{
    VEC_TYPE a = inputA.x[gl_GlobalInvocationID.x];
    VEC_TYPE b = inputB.x[gl_GlobalInvocationID.x];
    VEC_TYPE c = VEC_TYPE(1., 1., 1., 1.);
    [[unroll]]
    for(uint i = 0; i < kLoopSize; i++) {
      c = FMA;
      c = FMA;
      c = FMA;
      c = FMA;
      c = FMA;
      c = FMA;
      c = FMA;
      c = FMA;
    }
    outputO.x[gl_GlobalInvocationID.x] = c;
}